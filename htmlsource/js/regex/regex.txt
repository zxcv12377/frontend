정규표현식(Regular Expression) : 문자검색, 교체에 사용되는 패턴
- 패턴은 이미 정의가 되어 있음

패턴 생성
- /기호/플래그

플래그
g : 전역검색
i : 대소문자 구별 없는 검색
m : 다중 행 검색

패턴
. : 문자, 공백, 기호 등 어떤 문자와도 매칭
\. : 마침표
ex)  \..\.  : .A., .가.

[] : 대괄호안에 들어있는 문자 개별로 매칭
ex) [abc] : a or b or c ,  [A-Z] : 대문자 26자 의미, [가-힣] : 한글

[^패턴] : 대괄호 안에 ^ 는 포함하지 않는
ex) [^a-z] : 소문자를 제외한

() : 캡쳐링, 그룹
ex) (on|ues|rida) : 문자 안에 on or ues or rida 가 포함된

수량
+ : 최소 1 ~ 최대 무제한
* : 최소 0 ~ 최대 무제한
? : 최소 0 ~ 최대 1
{숫자1} : 지정된 숫자만 허용
{숫자1,숫자2} : 최소 숫자1 ~ 최대 숫자2
{숫자1,} : 최소 숫자1 ~ 최대 무제한
ex) [a-z]+ : 소문자 최소 1 ~ 최대 무제한
    [a-z]* : 소문자 최소 0 ~ 최대 무제한

    적극적(탐욕적) 일치와 소극적 일치
    /<i>.+<\/i>/g  : i 태그 추출
    <i>greedy</i> and <i>lazy</i> matching
    결과 : <i>greedy</i> and <i>lazy</i> => 적극적(탐욕적) 방식이 기본임

    /<i>.+?<\/i>/g  : 소극적(lazy) 일치로 변경
    결과 : <i>greedy</i>,  <i>lazy</i>

\w == [A-Za-z0-9_]
\W == [^A-Za-z0-9_]
\s == 공백
\S == 공백 제외한
\d == 숫자
\D == 숫자 제외한

^ : 시작하는
$ : 끝나는



자바스크립트 정규표현식

정규식 생성
- /패턴/플래그
- new RegExp("패턴","플래그")

메소드
- exec() : 정규식 메소드 => 일치하는 문자열 돌려줌
- test() : 정규식 메소드 => 패턴과 일치하면 true, 일치하지 않는 경우 false
- match() : string 메소드 == exec() 같은 개념
- search() : string 메소드 => 패턴이 시작하는 인덱스
- replace() : string 메소드
- split() : string 메소드